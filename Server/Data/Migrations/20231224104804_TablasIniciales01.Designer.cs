// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PruebaIngresoFMP.Server.Data;

#nullable disable

namespace PruebaIngresoFMP.Server.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231224104804_TablasIniciales01")]
    partial class TablasIniciales01
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PruebaIngresoFMP.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PruebaIngresoFMP.Shared.Models.Aspirantes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Fechaactualizacion")
                        .HasColumnType("datetime2");

                    b.Property<long>("Identificacion")
                        .HasColumnType("bigint");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Usuario")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Aspirantes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Apellidos = "Buckridge",
                            Direccion = "5685 Jacky Lake Suite 223",
                            Email = "miss.yesenia_reilly@krajcik.co.uk",
                            Identificacion = 10L,
                            Nombres = "Autumn",
                            Telefono = "186.062.1756 x92843"
                        },
                        new
                        {
                            Id = 2L,
                            Apellidos = "Kertzmann",
                            Direccion = "0104 Jakubowski Grove Apt. 505",
                            Email = "ashley.gusikowski.dvm@kohlerfahey.info",
                            Identificacion = 9L,
                            Nombres = "Noe",
                            Telefono = "1-817-455-4592 x396"
                        },
                        new
                        {
                            Id = 3L,
                            Apellidos = "Huels",
                            Direccion = "72507 McLaughlin Motorway Suite 017",
                            Email = "mariane.schoen@denesik.com",
                            Identificacion = 9L,
                            Nombres = "Elsa",
                            Telefono = "(604)479-2219"
                        },
                        new
                        {
                            Id = 4L,
                            Apellidos = "Hettinger",
                            Direccion = "59228 Mauricio Union Suite 316",
                            Email = "dr.greta_jedidiah.anderson.md@dachschmitt.uk",
                            Identificacion = 5L,
                            Nombres = "Anita",
                            Telefono = "707-555-9770 x25845"
                        },
                        new
                        {
                            Id = 5L,
                            Apellidos = "Rosenbaum",
                            Direccion = "32880 Wilderman Street Suite 983",
                            Email = "mr_jalen_kerluke.iv@medhurst.info",
                            Identificacion = 3L,
                            Nombres = "Raphaelle",
                            Telefono = "299-585-2226"
                        },
                        new
                        {
                            Id = 6L,
                            Apellidos = "Klein",
                            Direccion = "92084 Jones Square Apt. 843",
                            Email = "kariane.jerde@yostarmstrong.biz",
                            Identificacion = 6L,
                            Nombres = "Berneice",
                            Telefono = "1-996-946-5979 x25059"
                        },
                        new
                        {
                            Id = 7L,
                            Apellidos = "Welch",
                            Direccion = "9433 Satterfield Lake Suite 102",
                            Email = "janie_welch@gorczany.co.uk",
                            Identificacion = 8L,
                            Nombres = "Trycia",
                            Telefono = "060.623.6687 x4116"
                        },
                        new
                        {
                            Id = 8L,
                            Apellidos = "Jacobson",
                            Direccion = "8507 Weber Hill Suite 515",
                            Email = "emmitt.jewess@dubuquewelch.co.uk",
                            Identificacion = 4L,
                            Nombres = "Lawrence",
                            Telefono = "(105)249-8371"
                        },
                        new
                        {
                            Id = 9L,
                            Apellidos = "Bogan",
                            Direccion = "6440 Wilhelm Wells Apt. 886",
                            Email = "dr.jettie.justus.howell.v@witting.co.uk",
                            Identificacion = 6L,
                            Nombres = "Katrina",
                            Telefono = "213.317.6741 x736"
                        },
                        new
                        {
                            Id = 10L,
                            Apellidos = "Becker",
                            Direccion = "97171 Johnny Spur Suite 097",
                            Email = "brent_ankunding@nikolaus.ca",
                            Identificacion = 8L,
                            Nombres = "Domingo",
                            Telefono = "1-027-602-6731"
                        },
                        new
                        {
                            Id = 11L,
                            Apellidos = "Schiller",
                            Direccion = "407 Marina Lake Suite 612",
                            Email = "dwight.swaniawski@rowegrady.ca",
                            Identificacion = 9L,
                            Nombres = "Cooper",
                            Telefono = "(879)212-9377"
                        },
                        new
                        {
                            Id = 12L,
                            Apellidos = "Jacobs",
                            Direccion = "1357 Turner Plains Suite 610",
                            Email = "herta_leo.murphy_i@heathcote.biz",
                            Identificacion = 3L,
                            Nombres = "Kennedi",
                            Telefono = "1-196-157-5929 x7711"
                        },
                        new
                        {
                            Id = 13L,
                            Apellidos = "Fay",
                            Direccion = "24785 Destinee Knolls Suite 493",
                            Email = "mrs.peter.bahringer.iii@kessler.co.uk",
                            Identificacion = 3L,
                            Nombres = "Walker",
                            Telefono = "(589)073-2349 x5581"
                        },
                        new
                        {
                            Id = 14L,
                            Apellidos = "Roob",
                            Direccion = "511 Izaiah Harbors Suite 002",
                            Email = "friedrich.felipe_christiansen.ii@steuberleffler.name",
                            Identificacion = 5L,
                            Nombres = "Destiney",
                            Telefono = "1-178-472-9498 x32595"
                        },
                        new
                        {
                            Id = 15L,
                            Apellidos = "Strosin",
                            Direccion = "8979 Dibbert Fields Suite 966",
                            Email = "petra.kemmer@cummings.com",
                            Identificacion = 7L,
                            Nombres = "Izabella",
                            Telefono = "1-022-387-3361 x72755"
                        });
                });

            modelBuilder.Entity("PruebaIngresoFMP.Shared.Models.EstadosPrueba", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Estadospruebas");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Descripcion = "Registrada"
                        },
                        new
                        {
                            Id = 2L,
                            Descripcion = "En proceso"
                        },
                        new
                        {
                            Id = 3L,
                            Descripcion = "Terminada"
                        },
                        new
                        {
                            Id = 4L,
                            Descripcion = "Anulada"
                        });
                });

            modelBuilder.Entity("PruebaIngresoFMP.Shared.Models.LenguajesProgramacion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LenguajesProgramacions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Descripcion = "SDK Java",
                            Nombre = "Java"
                        },
                        new
                        {
                            Id = 2L,
                            Descripcion = ".Net C#",
                            Nombre = "C#"
                        },
                        new
                        {
                            Id = 3L,
                            Descripcion = "Javascript",
                            Nombre = "Javascript"
                        },
                        new
                        {
                            Id = 4L,
                            Descripcion = "GoLang",
                            Nombre = "Go"
                        });
                });

            modelBuilder.Entity("PruebaIngresoFMP.Shared.Models.NivelPrueba", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NivelPruebas");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Nombre = "Junior"
                        },
                        new
                        {
                            Id = 2L,
                            Nombre = "Middle"
                        },
                        new
                        {
                            Id = 3L,
                            Nombre = "Senior"
                        });
                });

            modelBuilder.Entity("PruebaIngresoFMP.Shared.Models.Preguntas", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("Fechaactualizacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Pregunta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PruebasId")
                        .HasColumnType("bigint");

                    b.Property<string>("Respuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Usuario")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PruebasId");

                    b.ToTable("Preguntas");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Pregunta = "Ab vel repellendus quia deserunt ullam iste.",
                            PruebasId = 1L,
                            Respuesta = "Aspernatur expedita sit nihil quia."
                        },
                        new
                        {
                            Id = 2L,
                            Pregunta = "Non quis omnis et eos accusamus non possimus et ut.",
                            PruebasId = 1L,
                            Respuesta = "Modi voluptatibus dolore dolor distinctio."
                        },
                        new
                        {
                            Id = 3L,
                            Pregunta = "Accusantium quae enim ut.",
                            PruebasId = 1L,
                            Respuesta = "Necessitatibus asperiores molestiae et voluptas quos iure aut."
                        },
                        new
                        {
                            Id = 4L,
                            Pregunta = "Corrupti officiis ut saepe quaerat adipisci maiores veritatis.",
                            PruebasId = 2L,
                            Respuesta = "Sit omnis eos exercitationem et qui."
                        },
                        new
                        {
                            Id = 5L,
                            Pregunta = "Id voluptatem cumque modi dolor magnam aperiam rerum quia.",
                            PruebasId = 2L,
                            Respuesta = "Et et magnam natus eum doloribus consequatur voluptatem explicabo."
                        },
                        new
                        {
                            Id = 6L,
                            Pregunta = "Quisquam ullam id pariatur a nam similique.",
                            PruebasId = 2L,
                            Respuesta = "Voluptates culpa dolorum sed officia iste."
                        },
                        new
                        {
                            Id = 7L,
                            Pregunta = "Mollitia aperiam est non ea similique ea at voluptates.",
                            PruebasId = 3L,
                            Respuesta = "Est officia dignissimos debitis earum odit aut amet."
                        },
                        new
                        {
                            Id = 8L,
                            Pregunta = "Dolore enim doloremque laboriosam dolorem occaecati iusto temporibus.",
                            PruebasId = 3L,
                            Respuesta = "Consequatur sit animi placeat voluptas quibusdam."
                        },
                        new
                        {
                            Id = 9L,
                            Pregunta = "Totam enim est cupiditate voluptates possimus architecto rerum et.",
                            PruebasId = 3L,
                            Respuesta = "Sed consequatur est rerum omnis fugiat voluptas."
                        },
                        new
                        {
                            Id = 10L,
                            Pregunta = "Ut non aut sed illo officia.",
                            PruebasId = 4L,
                            Respuesta = "Sed enim est iste qui fugit ut quos dolore."
                        },
                        new
                        {
                            Id = 11L,
                            Pregunta = "Repudiandae eos magni nulla vel non aliquam.",
                            PruebasId = 4L,
                            Respuesta = "Aut ratione corrupti neque nobis laudantium reiciendis et."
                        },
                        new
                        {
                            Id = 12L,
                            Pregunta = "Aliquid aut possimus dicta.",
                            PruebasId = 4L,
                            Respuesta = "Molestias optio qui quasi."
                        },
                        new
                        {
                            Id = 13L,
                            Pregunta = "Provident esse libero voluptatem excepturi pariatur.",
                            PruebasId = 5L,
                            Respuesta = "Nobis quia enim pariatur rerum incidunt."
                        },
                        new
                        {
                            Id = 14L,
                            Pregunta = "Impedit harum dolorem cupiditate.",
                            PruebasId = 5L,
                            Respuesta = "Voluptas et nulla quia qui dicta officia sint officiis."
                        },
                        new
                        {
                            Id = 15L,
                            Pregunta = "Vel numquam maxime non officia autem itaque ut sed.",
                            PruebasId = 5L,
                            Respuesta = "Fugit numquam quod qui."
                        });
                });

            modelBuilder.Entity("PruebaIngresoFMP.Shared.Models.Pruebas", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("Cantidadpreguntas")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Fechaactualizacion")
                        .HasColumnType("datetime2");

                    b.Property<long>("LenguajesProgramacionId")
                        .HasColumnType("bigint");

                    b.Property<long>("NivelPruebaId")
                        .HasColumnType("bigint");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipoprueba")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Usuario")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LenguajesProgramacionId");

                    b.HasIndex("NivelPruebaId");

                    b.ToTable("Pruebas");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Cantidadpreguntas = 2,
                            Codigo = "000001",
                            Descripcion = "qui",
                            LenguajesProgramacionId = 3L,
                            NivelPruebaId = 2L,
                            Nombre = "Explicabo error ut officiis ex ut iure.",
                            Tipoprueba = "Tecnica"
                        },
                        new
                        {
                            Id = 2L,
                            Cantidadpreguntas = 2,
                            Codigo = "000002",
                            Descripcion = "sequi",
                            LenguajesProgramacionId = 3L,
                            NivelPruebaId = 2L,
                            Nombre = "Error animi adipisci sint repellendus error non ipsa occaecati.",
                            Tipoprueba = "Tecnica"
                        },
                        new
                        {
                            Id = 3L,
                            Cantidadpreguntas = 2,
                            Codigo = "000003",
                            Descripcion = "sit",
                            LenguajesProgramacionId = 2L,
                            NivelPruebaId = 3L,
                            Nombre = "Minima pariatur quis corrupti cum dolor est accusantium aut est.",
                            Tipoprueba = "Tecnica"
                        },
                        new
                        {
                            Id = 4L,
                            Cantidadpreguntas = 2,
                            Codigo = "000004",
                            Descripcion = "tempora",
                            LenguajesProgramacionId = 2L,
                            NivelPruebaId = 3L,
                            Nombre = "Enim qui aut commodi odio numquam ea.",
                            Tipoprueba = "Tecnica"
                        },
                        new
                        {
                            Id = 5L,
                            Cantidadpreguntas = 2,
                            Codigo = "000005",
                            Descripcion = "numquam",
                            LenguajesProgramacionId = 3L,
                            NivelPruebaId = 2L,
                            Nombre = "Cupiditate iusto doloremque et eos sapiente dolores similique odio.",
                            Tipoprueba = "Tecnica"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PruebaIngresoFMP.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PruebaIngresoFMP.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PruebaIngresoFMP.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PruebaIngresoFMP.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PruebaIngresoFMP.Shared.Models.Preguntas", b =>
                {
                    b.HasOne("PruebaIngresoFMP.Shared.Models.Pruebas", "Pruebas")
                        .WithMany()
                        .HasForeignKey("PruebasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pruebas");
                });

            modelBuilder.Entity("PruebaIngresoFMP.Shared.Models.Pruebas", b =>
                {
                    b.HasOne("PruebaIngresoFMP.Shared.Models.LenguajesProgramacion", "LenguajesProgramacion")
                        .WithMany()
                        .HasForeignKey("LenguajesProgramacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PruebaIngresoFMP.Shared.Models.NivelPrueba", "NivelPrueba")
                        .WithMany()
                        .HasForeignKey("NivelPruebaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LenguajesProgramacion");

                    b.Navigation("NivelPrueba");
                });
#pragma warning restore 612, 618
        }
    }
}

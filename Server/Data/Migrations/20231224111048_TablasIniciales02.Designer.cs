// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PruebaIngresoFMP.Server.Data;

#nullable disable

namespace PruebaIngresoFMP.Server.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231224111048_TablasIniciales02")]
    partial class TablasIniciales02
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PruebaIngresoFMP.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PruebaIngresoFMP.Shared.Models.Aspirantes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Fechaactualizacion")
                        .HasColumnType("datetime2");

                    b.Property<long>("Identificacion")
                        .HasColumnType("bigint");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Usuario")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Aspirantes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Apellidos = "Homenick",
                            Direccion = "98693 Immanuel Bypass Suite 948",
                            Email = "miss_gonzalo.prohaska_phd@kerlukehammes.info",
                            Identificacion = 0L,
                            Nombres = "Thad",
                            Telefono = "416.225.6235 x478"
                        },
                        new
                        {
                            Id = 2L,
                            Apellidos = "Ziemann",
                            Direccion = "80420 Jaden Garden Apt. 683",
                            Email = "aaliyah_krajcik@graham.biz",
                            Identificacion = 7L,
                            Nombres = "Sonny",
                            Telefono = "932-074-0314 x642"
                        },
                        new
                        {
                            Id = 3L,
                            Apellidos = "Hirthe",
                            Direccion = "927 Charlie Passage Suite 949",
                            Email = "miss_marguerite_doyle.ii@kub.com",
                            Identificacion = 5L,
                            Nombres = "Jeffrey",
                            Telefono = "820.017.3457"
                        },
                        new
                        {
                            Id = 4L,
                            Apellidos = "Hilpert",
                            Direccion = "91117 Santos Ranch Apt. 998",
                            Email = "jerome.bergnaum@stammgrimes.us",
                            Identificacion = 3L,
                            Nombres = "Bennett",
                            Telefono = "1-886-196-7026 x65651"
                        },
                        new
                        {
                            Id = 5L,
                            Apellidos = "Franecki",
                            Direccion = "9490 Weston Hills Suite 722",
                            Email = "america_sauer@jacobson.com",
                            Identificacion = 10L,
                            Nombres = "Kaylie",
                            Telefono = "852-644-9510 x324"
                        },
                        new
                        {
                            Id = 6L,
                            Apellidos = "Batz",
                            Direccion = "189 Bogan Park Apt. 538",
                            Email = "hailie.veum@osinski.ca",
                            Identificacion = 4L,
                            Nombres = "Katherine",
                            Telefono = "290.462.4684 x17391"
                        },
                        new
                        {
                            Id = 7L,
                            Apellidos = "Murphy",
                            Direccion = "36879 Cleta Plains Apt. 423",
                            Email = "joy.rogahn@predovicgoodwin.name",
                            Identificacion = 4L,
                            Nombres = "Manley",
                            Telefono = "(894)877-2623"
                        },
                        new
                        {
                            Id = 8L,
                            Apellidos = "Bode",
                            Direccion = "31555 Terrill Brooks Apt. 009",
                            Email = "bethel_heller@schamberger.co.uk",
                            Identificacion = 10L,
                            Nombres = "Brice",
                            Telefono = "1-825-381-2555 x126"
                        },
                        new
                        {
                            Id = 9L,
                            Apellidos = "Pagac",
                            Direccion = "784 Pfeffer Green Suite 484",
                            Email = "oscar_giles.russel_iii@steuberreinger.com",
                            Identificacion = 7L,
                            Nombres = "Ezra",
                            Telefono = "841-623-8559"
                        },
                        new
                        {
                            Id = 10L,
                            Apellidos = "Legros",
                            Direccion = "4270 Valentine Islands Apt. 718",
                            Email = "owen.von@bartonpouros.name",
                            Identificacion = 1L,
                            Nombres = "Linda",
                            Telefono = "1-936-098-9021 x923"
                        },
                        new
                        {
                            Id = 11L,
                            Apellidos = "Hegmann",
                            Direccion = "70516 Gilbert Extensions Suite 478",
                            Email = "alejandra_flatley@collier.uk",
                            Identificacion = 9L,
                            Nombres = "Orval",
                            Telefono = "608.246.2288"
                        },
                        new
                        {
                            Id = 12L,
                            Apellidos = "Willms",
                            Direccion = "92307 Kris Ridges Suite 457",
                            Email = "ocie_murphy@doylemohr.ca",
                            Identificacion = 4L,
                            Nombres = "Daphney",
                            Telefono = "263-731-3638 x099"
                        },
                        new
                        {
                            Id = 13L,
                            Apellidos = "Walker",
                            Direccion = "0858 Cullen Meadow Suite 550",
                            Email = "laurianne.emmerich@armstrong.uk",
                            Identificacion = 10L,
                            Nombres = "Ethel",
                            Telefono = "1-412-226-7876 x163"
                        },
                        new
                        {
                            Id = 14L,
                            Apellidos = "Steuber",
                            Direccion = "14325 Raven Harbors Apt. 657",
                            Email = "gianni_lang@stantongrimes.uk",
                            Identificacion = 4L,
                            Nombres = "Mikayla",
                            Telefono = "1-023-870-5768"
                        },
                        new
                        {
                            Id = 15L,
                            Apellidos = "Anderson",
                            Direccion = "4929 Collins Pines Suite 233",
                            Email = "ms_clement_jeanette.volkman_ii@greenholt.uk",
                            Identificacion = 6L,
                            Nombres = "Vida",
                            Telefono = "(462)078-8199 x74577"
                        });
                });

            modelBuilder.Entity("PruebaIngresoFMP.Shared.Models.EstadosPrueba", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Estadospruebas");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Descripcion = "Registrada"
                        },
                        new
                        {
                            Id = 2L,
                            Descripcion = "En proceso"
                        },
                        new
                        {
                            Id = 3L,
                            Descripcion = "Terminada"
                        },
                        new
                        {
                            Id = 4L,
                            Descripcion = "Anulada"
                        });
                });

            modelBuilder.Entity("PruebaIngresoFMP.Shared.Models.LenguajesProgramacion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LenguajesProgramacions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Descripcion = "SDK Java",
                            Nombre = "Java"
                        },
                        new
                        {
                            Id = 2L,
                            Descripcion = ".Net C#",
                            Nombre = "C#"
                        },
                        new
                        {
                            Id = 3L,
                            Descripcion = "Javascript",
                            Nombre = "Javascript"
                        },
                        new
                        {
                            Id = 4L,
                            Descripcion = "GoLang",
                            Nombre = "Go"
                        });
                });

            modelBuilder.Entity("PruebaIngresoFMP.Shared.Models.NivelPrueba", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NivelPruebas");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Nombre = "Junior"
                        },
                        new
                        {
                            Id = 2L,
                            Nombre = "Middle"
                        },
                        new
                        {
                            Id = 3L,
                            Nombre = "Senior"
                        });
                });

            modelBuilder.Entity("PruebaIngresoFMP.Shared.Models.Preguntas", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("Fechaactualizacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Pregunta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PruebasId")
                        .HasColumnType("bigint");

                    b.Property<string>("Respuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Usuario")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PruebasId");

                    b.ToTable("Preguntas");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Pregunta = "Deserunt quasi nam ex totam odit distinctio est et reprehenderit.",
                            PruebasId = 1L,
                            Respuesta = "Et illo omnis eum corrupti sint nam."
                        },
                        new
                        {
                            Id = 2L,
                            Pregunta = "Iste nemo velit id sunt.",
                            PruebasId = 1L,
                            Respuesta = "Nam laboriosam perspiciatis nesciunt voluptas est."
                        },
                        new
                        {
                            Id = 3L,
                            Pregunta = "Quia quo rem et et aut iure nemo.",
                            PruebasId = 1L,
                            Respuesta = "Modi sed qui vero."
                        },
                        new
                        {
                            Id = 4L,
                            Pregunta = "Impedit cupiditate excepturi dolorem qui qui atque soluta.",
                            PruebasId = 2L,
                            Respuesta = "Cum sunt blanditiis accusantium quisquam."
                        },
                        new
                        {
                            Id = 5L,
                            Pregunta = "Ut ab quibusdam quisquam nobis incidunt modi consequuntur recusandae.",
                            PruebasId = 2L,
                            Respuesta = "Eos blanditiis necessitatibus labore eos velit et."
                        },
                        new
                        {
                            Id = 6L,
                            Pregunta = "Ab provident dicta nesciunt porro est.",
                            PruebasId = 2L,
                            Respuesta = "Ut aut blanditiis reprehenderit."
                        },
                        new
                        {
                            Id = 7L,
                            Pregunta = "Fugit tempora aspernatur aliquid perspiciatis nihil temporibus est totam.",
                            PruebasId = 3L,
                            Respuesta = "Ipsam dolore doloremque eaque accusantium."
                        },
                        new
                        {
                            Id = 8L,
                            Pregunta = "Voluptas harum repudiandae non.",
                            PruebasId = 3L,
                            Respuesta = "Nam sunt sint sit impedit labore unde."
                        },
                        new
                        {
                            Id = 9L,
                            Pregunta = "Eum alias quas distinctio incidunt.",
                            PruebasId = 3L,
                            Respuesta = "Odio architecto temporibus maiores quibusdam aut voluptatem."
                        },
                        new
                        {
                            Id = 10L,
                            Pregunta = "Excepturi est quia cupiditate.",
                            PruebasId = 4L,
                            Respuesta = "Quod necessitatibus deserunt doloribus."
                        },
                        new
                        {
                            Id = 11L,
                            Pregunta = "Doloremque ut similique sit nihil ut.",
                            PruebasId = 4L,
                            Respuesta = "Voluptatum ut nihil voluptates vel aut aut maxime ut."
                        },
                        new
                        {
                            Id = 12L,
                            Pregunta = "Dolorem sed voluptatem exercitationem nobis ratione laboriosam dolores.",
                            PruebasId = 4L,
                            Respuesta = "Itaque et temporibus error omnis doloremque cupiditate aut tempore beatae."
                        },
                        new
                        {
                            Id = 13L,
                            Pregunta = "Ut quasi soluta sunt incidunt.",
                            PruebasId = 5L,
                            Respuesta = "Eos est rerum omnis amet repellendus non qui iure atque."
                        },
                        new
                        {
                            Id = 14L,
                            Pregunta = "Ipsum quia et illo.",
                            PruebasId = 5L,
                            Respuesta = "Corporis voluptas quas beatae nihil sunt id aperiam consectetur."
                        },
                        new
                        {
                            Id = 15L,
                            Pregunta = "Minus occaecati cum cumque voluptas.",
                            PruebasId = 5L,
                            Respuesta = "Delectus molestiae deleniti autem."
                        });
                });

            modelBuilder.Entity("PruebaIngresoFMP.Shared.Models.Pruebas", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("Cantidadpreguntas")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Fechaactualizacion")
                        .HasColumnType("datetime2");

                    b.Property<long>("LenguajesProgramacionId")
                        .HasColumnType("bigint");

                    b.Property<long>("NivelPruebaId")
                        .HasColumnType("bigint");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipoprueba")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Usuario")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LenguajesProgramacionId");

                    b.HasIndex("NivelPruebaId");

                    b.ToTable("Pruebas");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Cantidadpreguntas = 2,
                            Codigo = "000001",
                            Descripcion = "maxime",
                            LenguajesProgramacionId = 2L,
                            NivelPruebaId = 3L,
                            Nombre = "Est cum aut nostrum nisi voluptatem voluptatem.",
                            Tipoprueba = "Tecnica"
                        },
                        new
                        {
                            Id = 2L,
                            Cantidadpreguntas = 2,
                            Codigo = "000002",
                            Descripcion = "aperiam",
                            LenguajesProgramacionId = 2L,
                            NivelPruebaId = 3L,
                            Nombre = "Laborum labore dolorem ut.",
                            Tipoprueba = "Tecnica"
                        },
                        new
                        {
                            Id = 3L,
                            Cantidadpreguntas = 2,
                            Codigo = "000003",
                            Descripcion = "accusantium",
                            LenguajesProgramacionId = 4L,
                            NivelPruebaId = 3L,
                            Nombre = "Quisquam illo fugiat voluptatem ut et repellat ex.",
                            Tipoprueba = "Tecnica"
                        },
                        new
                        {
                            Id = 4L,
                            Cantidadpreguntas = 2,
                            Codigo = "000004",
                            Descripcion = "dolores",
                            LenguajesProgramacionId = 3L,
                            NivelPruebaId = 2L,
                            Nombre = "Nesciunt modi ut et sunt.",
                            Tipoprueba = "Tecnica"
                        },
                        new
                        {
                            Id = 5L,
                            Cantidadpreguntas = 2,
                            Codigo = "000005",
                            Descripcion = "vel",
                            LenguajesProgramacionId = 3L,
                            NivelPruebaId = 2L,
                            Nombre = "Quisquam harum placeat culpa quia explicabo.",
                            Tipoprueba = "Tecnica"
                        });
                });

            modelBuilder.Entity("PruebaIngresoFMP.Shared.Models.PruebasSeleccion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AspiranteId")
                        .HasColumnType("bigint");

                    b.Property<int>("Calificacion")
                        .HasColumnType("int");

                    b.Property<long>("EstadospruebasId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Fechaactualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Fechafinalizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Fechainicio")
                        .HasColumnType("datetime2");

                    b.Property<long>("PruebasId")
                        .HasColumnType("bigint");

                    b.Property<string>("Usuario")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AspiranteId");

                    b.HasIndex("EstadospruebasId");

                    b.HasIndex("PruebasId");

                    b.ToTable("PruebasSeleccions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AspiranteId = 4L,
                            Calificacion = 88,
                            EstadospruebasId = 4L,
                            Fechafinalizacion = new DateTime(2023, 12, 24, 9, 10, 47, 687, DateTimeKind.Local).AddTicks(3097),
                            Fechainicio = new DateTime(2023, 12, 24, 6, 10, 47, 687, DateTimeKind.Local).AddTicks(3078),
                            PruebasId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            AspiranteId = 7L,
                            Calificacion = 67,
                            EstadospruebasId = 3L,
                            Fechafinalizacion = new DateTime(2023, 12, 24, 7, 10, 47, 687, DateTimeKind.Local).AddTicks(3113),
                            Fechainicio = new DateTime(2023, 12, 24, 6, 11, 47, 687, DateTimeKind.Local).AddTicks(3113),
                            PruebasId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            AspiranteId = 15L,
                            Calificacion = 4,
                            EstadospruebasId = 3L,
                            Fechafinalizacion = new DateTime(2023, 12, 24, 8, 10, 47, 687, DateTimeKind.Local).AddTicks(3121),
                            Fechainicio = new DateTime(2023, 12, 24, 6, 12, 47, 687, DateTimeKind.Local).AddTicks(3121),
                            PruebasId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            AspiranteId = 12L,
                            Calificacion = 88,
                            EstadospruebasId = 1L,
                            Fechafinalizacion = new DateTime(2023, 12, 24, 8, 10, 47, 687, DateTimeKind.Local).AddTicks(3129),
                            Fechainicio = new DateTime(2023, 12, 24, 6, 13, 47, 687, DateTimeKind.Local).AddTicks(3128),
                            PruebasId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            AspiranteId = 1L,
                            Calificacion = 22,
                            EstadospruebasId = 2L,
                            Fechafinalizacion = new DateTime(2023, 12, 24, 7, 10, 47, 687, DateTimeKind.Local).AddTicks(3278),
                            Fechainicio = new DateTime(2023, 12, 24, 6, 14, 47, 687, DateTimeKind.Local).AddTicks(3275),
                            PruebasId = 3L
                        },
                        new
                        {
                            Id = 6L,
                            AspiranteId = 8L,
                            Calificacion = 28,
                            EstadospruebasId = 1L,
                            Fechafinalizacion = new DateTime(2023, 12, 24, 9, 10, 47, 687, DateTimeKind.Local).AddTicks(3294),
                            Fechainicio = new DateTime(2023, 12, 24, 6, 15, 47, 687, DateTimeKind.Local).AddTicks(3293),
                            PruebasId = 4L
                        },
                        new
                        {
                            Id = 7L,
                            AspiranteId = 15L,
                            Calificacion = 97,
                            EstadospruebasId = 3L,
                            Fechafinalizacion = new DateTime(2023, 12, 24, 8, 10, 47, 687, DateTimeKind.Local).AddTicks(3303),
                            Fechainicio = new DateTime(2023, 12, 24, 6, 16, 47, 687, DateTimeKind.Local).AddTicks(3303),
                            PruebasId = 5L
                        },
                        new
                        {
                            Id = 8L,
                            AspiranteId = 12L,
                            Calificacion = 73,
                            EstadospruebasId = 1L,
                            Fechafinalizacion = new DateTime(2023, 12, 24, 7, 10, 47, 687, DateTimeKind.Local).AddTicks(3315),
                            Fechainicio = new DateTime(2023, 12, 24, 6, 17, 47, 687, DateTimeKind.Local).AddTicks(3314),
                            PruebasId = 2L
                        },
                        new
                        {
                            Id = 9L,
                            AspiranteId = 8L,
                            Calificacion = 64,
                            EstadospruebasId = 3L,
                            Fechafinalizacion = new DateTime(2023, 12, 24, 8, 10, 47, 687, DateTimeKind.Local).AddTicks(3323),
                            Fechainicio = new DateTime(2023, 12, 24, 6, 18, 47, 687, DateTimeKind.Local).AddTicks(3322),
                            PruebasId = 5L
                        },
                        new
                        {
                            Id = 10L,
                            AspiranteId = 9L,
                            Calificacion = 59,
                            EstadospruebasId = 4L,
                            Fechafinalizacion = new DateTime(2023, 12, 24, 9, 10, 47, 687, DateTimeKind.Local).AddTicks(3333),
                            Fechainicio = new DateTime(2023, 12, 24, 6, 19, 47, 687, DateTimeKind.Local).AddTicks(3333),
                            PruebasId = 3L
                        },
                        new
                        {
                            Id = 11L,
                            AspiranteId = 9L,
                            Calificacion = 34,
                            EstadospruebasId = 4L,
                            Fechafinalizacion = new DateTime(2023, 12, 24, 7, 10, 47, 687, DateTimeKind.Local).AddTicks(3341),
                            Fechainicio = new DateTime(2023, 12, 24, 6, 20, 47, 687, DateTimeKind.Local).AddTicks(3341),
                            PruebasId = 4L
                        },
                        new
                        {
                            Id = 12L,
                            AspiranteId = 7L,
                            Calificacion = 71,
                            EstadospruebasId = 3L,
                            Fechafinalizacion = new DateTime(2023, 12, 24, 7, 10, 47, 687, DateTimeKind.Local).AddTicks(3349),
                            Fechainicio = new DateTime(2023, 12, 24, 6, 21, 47, 687, DateTimeKind.Local).AddTicks(3348),
                            PruebasId = 1L
                        },
                        new
                        {
                            Id = 13L,
                            AspiranteId = 5L,
                            Calificacion = 31,
                            EstadospruebasId = 1L,
                            Fechafinalizacion = new DateTime(2023, 12, 24, 7, 10, 47, 687, DateTimeKind.Local).AddTicks(3357),
                            Fechainicio = new DateTime(2023, 12, 24, 6, 22, 47, 687, DateTimeKind.Local).AddTicks(3356),
                            PruebasId = 3L
                        },
                        new
                        {
                            Id = 14L,
                            AspiranteId = 10L,
                            Calificacion = 30,
                            EstadospruebasId = 4L,
                            Fechafinalizacion = new DateTime(2023, 12, 24, 7, 10, 47, 687, DateTimeKind.Local).AddTicks(3367),
                            Fechainicio = new DateTime(2023, 12, 24, 6, 23, 47, 687, DateTimeKind.Local).AddTicks(3367),
                            PruebasId = 5L
                        },
                        new
                        {
                            Id = 15L,
                            AspiranteId = 8L,
                            Calificacion = 18,
                            EstadospruebasId = 1L,
                            Fechafinalizacion = new DateTime(2023, 12, 24, 8, 10, 47, 687, DateTimeKind.Local).AddTicks(3376),
                            Fechainicio = new DateTime(2023, 12, 24, 6, 24, 47, 687, DateTimeKind.Local).AddTicks(3375),
                            PruebasId = 4L
                        },
                        new
                        {
                            Id = 16L,
                            AspiranteId = 6L,
                            Calificacion = 67,
                            EstadospruebasId = 2L,
                            Fechafinalizacion = new DateTime(2023, 12, 24, 7, 10, 47, 687, DateTimeKind.Local).AddTicks(3384),
                            Fechainicio = new DateTime(2023, 12, 24, 6, 25, 47, 687, DateTimeKind.Local).AddTicks(3383),
                            PruebasId = 4L
                        },
                        new
                        {
                            Id = 17L,
                            AspiranteId = 1L,
                            Calificacion = 92,
                            EstadospruebasId = 2L,
                            Fechafinalizacion = new DateTime(2023, 12, 24, 8, 10, 47, 687, DateTimeKind.Local).AddTicks(3391),
                            Fechainicio = new DateTime(2023, 12, 24, 6, 26, 47, 687, DateTimeKind.Local).AddTicks(3391),
                            PruebasId = 4L
                        },
                        new
                        {
                            Id = 18L,
                            AspiranteId = 12L,
                            Calificacion = 14,
                            EstadospruebasId = 4L,
                            Fechafinalizacion = new DateTime(2023, 12, 24, 7, 10, 47, 687, DateTimeKind.Local).AddTicks(3401),
                            Fechainicio = new DateTime(2023, 12, 24, 6, 27, 47, 687, DateTimeKind.Local).AddTicks(3400),
                            PruebasId = 1L
                        },
                        new
                        {
                            Id = 19L,
                            AspiranteId = 2L,
                            Calificacion = 67,
                            EstadospruebasId = 2L,
                            Fechafinalizacion = new DateTime(2023, 12, 24, 9, 10, 47, 687, DateTimeKind.Local).AddTicks(3409),
                            Fechainicio = new DateTime(2023, 12, 24, 6, 28, 47, 687, DateTimeKind.Local).AddTicks(3408),
                            PruebasId = 5L
                        },
                        new
                        {
                            Id = 20L,
                            AspiranteId = 12L,
                            Calificacion = 49,
                            EstadospruebasId = 1L,
                            Fechafinalizacion = new DateTime(2023, 12, 24, 7, 10, 47, 687, DateTimeKind.Local).AddTicks(3419),
                            Fechainicio = new DateTime(2023, 12, 24, 6, 29, 47, 687, DateTimeKind.Local).AddTicks(3418),
                            PruebasId = 5L
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PruebaIngresoFMP.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PruebaIngresoFMP.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PruebaIngresoFMP.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PruebaIngresoFMP.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PruebaIngresoFMP.Shared.Models.Preguntas", b =>
                {
                    b.HasOne("PruebaIngresoFMP.Shared.Models.Pruebas", "Pruebas")
                        .WithMany()
                        .HasForeignKey("PruebasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pruebas");
                });

            modelBuilder.Entity("PruebaIngresoFMP.Shared.Models.Pruebas", b =>
                {
                    b.HasOne("PruebaIngresoFMP.Shared.Models.LenguajesProgramacion", "LenguajesProgramacion")
                        .WithMany()
                        .HasForeignKey("LenguajesProgramacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PruebaIngresoFMP.Shared.Models.NivelPrueba", "NivelPrueba")
                        .WithMany()
                        .HasForeignKey("NivelPruebaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LenguajesProgramacion");

                    b.Navigation("NivelPrueba");
                });

            modelBuilder.Entity("PruebaIngresoFMP.Shared.Models.PruebasSeleccion", b =>
                {
                    b.HasOne("PruebaIngresoFMP.Shared.Models.Aspirantes", "Aspirante")
                        .WithMany()
                        .HasForeignKey("AspiranteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PruebaIngresoFMP.Shared.Models.EstadosPrueba", "EstadosPruebas")
                        .WithMany()
                        .HasForeignKey("EstadospruebasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PruebaIngresoFMP.Shared.Models.Pruebas", "Pruebas")
                        .WithMany()
                        .HasForeignKey("PruebasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aspirante");

                    b.Navigation("EstadosPruebas");

                    b.Navigation("Pruebas");
                });
#pragma warning restore 612, 618
        }
    }
}
